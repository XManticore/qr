#!/usr/bin/ruby
#
# Gets multiple QR codes using Google's API
#
# Copyright 2012 Kareem Khazem
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'

# Default options
options = {}
# The filename of each qr code will be the bracketed part of the regex,
# applied to the URL used to generate the qr code.
# For the url https://foo.bar/baz/1234
# with the regex ".*(\d+)"
# the file will be named 1234.png
options[:regex] = /.*?(\d+)$/
options[:dir] = Dir.pwd
options[:size]= 400
# These cannot be changed on the command line at present
options[:level]="H"
options[:margin]="4"

# get command line options
parser = OptionParser.new do |opts|
  prog_name = File.basename($PROGRAM_NAME)
  opts.banner = <<END_BANNER
Batch QR Code Generator
```````````````````````
Usage: #{prog_name} [options] input-file
       `input-file' should contain a newline-delimited list of URLs to be  
       encoded as QR codes.
END_BANNER
  opts.on "-r REGEX", "--regex",
          "Extracts the filename of the QR code from the URL" do |regex|
    options[:regex] = regex
  end
  opts.on "-d DIR", "--directory",
          "Where the QR codes will be saved" do |dir|
    options[:dir] = dir
  end
  opts.on "-s SIZE", "--image-size",
          "The size of the side of the QR code, in pixels" do |size|
    options[:size] = size
  end
end
parser.parse!

# Set up base url
base_url = "https://chart.googleapis.com/chart?cht=qr"
base_url += unless options[:size].to_i < 50
              "&chs=#{options[:size].to_i}x#{options[:size].to_i}"
            else
              "&chs=512x512"
            end
base_url += "&chld=#{options[:level]}|#{options[:margin]}"

# Read file for urls
if ARGV.size != 1
  puts "Please provide an input file with a newline-delimited list of URLs"
  puts "Run this program with the -h or --help options for help"
  exit(1)
end
# create directory if it doesn't already exist
unless File.exists? options[:dir]
  Dir.mkdir options[:dir]
end
counter = 0
File.open ARGV[0], "r" do |file|
  while line = file.gets
    request_url = base_url + "&chl=#{line}"
    request_url.chomp!
    file_name = request_url.sub options[:regex], "\\1"
    system <<END_REQUEST
wget\
  --quiet\
  -O #{file_name}.png\
  --directory-prefix "./#{options[:dir]}"\
  "#{request_url}"
mv #{file_name}.png #{options[:dir]}/
END_REQUEST
    # Output progress in orders of magnitude to prevent scroll blindness
    counter_magnitude = counter.to_s.length
    print "\b" * counter_magnitude 
    #if counter % divisor == 0
      print "#{counter}"
    #end
    counter += 1
  end
  puts ""
end
